# This workflow uses actions that are not certified by GitHub.
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      ## create application-database.yaml
#      - name: make application.yaml
#        run: |
#          cd server/server-application/src/main/resources
#
#          # application-database.yaml 파일 생성
#          touch ./application.yml
#
#          # GitHub-Actions 에서 설정한 값을 application-database.yaml 파일에 쓰기
#          echo "${{ secrets.PROPERTIES }}" >> ./application.yml
#        shell: bash
      - name: Build with Gradle
        run: |
          cd server/server-application
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Docker build & push to docker repo
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          cd server/server-application
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/seb44-pre-015 .
          docker push ${{ secrets.DOCKER_REPO }}/seb44-pre-015


      - name: Deploy to server
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker stop web || true
            sudo docker rm web || true
            sudo docker pull ${{ secrets.DOCKER_REPO }}/seb44-pre-015
            cd /usr/local/bin
            sudo docker-compose up -d
            docker image prune -f